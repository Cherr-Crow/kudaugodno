from django.contrib import admin

from all_fixture.choices import CountryChoices
from blogs.models import (
    Article,
    ArticleMedia,
    Category,
    Comment,
    CommentLike,
    Tag,
    Theme,
)


# noinspection PyUnresolvedReferences
class SlugNameAdmin(admin.ModelAdmin):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∞–¥–º–∏–Ω–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π —Å –ø–æ–ª—è–º–∏ name –∏ slug.
    """

    list_display = ("name", "slug")
    list_filter = ("name", "slug")
    search_fields = ("name",)
    prepopulated_fields = {"slug": ("name",)}


@admin.register(Category)
class CategoryAdmin(SlugNameAdmin):
    """
    –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ–ª–∏ Category (–Ω–∞—Å–ª–µ–¥—É–µ—Ç SlugNameAdmin).
    """


@admin.register(Tag)
class TagsAdmin(SlugNameAdmin):
    """
    –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ–ª–∏ Tag.
    """


@admin.register(Theme)
class ThemeAdmin(SlugNameAdmin):
    """
    –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ–ª–∏ Theme.
    """


@admin.register(Article)
class ArticleAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ–ª–∏ —Å—Ç–∞—Ç—å—è.
    """

    list_display = (
        "title",
        "author",
        "content",
        "pub_date",
        "short_description",
        "is_published",
        "views_count",
        "rating",
        "created_at",
        "updated_at",
        "display_countries",
    )
    list_filter = (
        "title",
        "author",
        "content",
        "pub_date",
        "short_description",
        "is_published",
        "views_count",
        "rating",
        "created_at",
        "updated_at",
    )
    search_fields = (
        "title",
        "countries",
    )

    def display_countries(self, obj):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω —Å—Ç–∞—Ç—å–∏ –≤ —Å—Ç—Ä–æ–∫—É —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏.
        """

        country_mapping = dict(CountryChoices.choices)
        return ", ".join(country_mapping.get(code, code) for code in obj.countries)

    display_countries.short_description = "–°—Ç—Ä–∞–Ω—ã"


@admin.register(Comment)
class CommentAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
    """

    list_display = (
        "article",
        "text",
        "author",
        "created_at",
        "is_active",
        "likes_count_display",
        "dislikes_count_display",
    )
    list_filter = (
        "is_active",
        "article",
        "author",
        "created_at",
    )
    search_fields = ["text"]
    actions = ["approve_comments"]

    def likes_count_display(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤.
        """

        return obj.likes_count

    likes_count_display.short_description = "–õ–∞–π–∫–∏"
    likes_count_display.admin_order_field = "likes_count"

    def dislikes_count_display(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∑–ª–∞–π–∫–æ–≤.
        """

        return obj.dislikes_count

    dislikes_count_display.short_description = "–î–∏–∑–ª–∞–π–∫–∏"
    dislikes_count_display.admin_order_field = "dislikes_count"

    def approve_comments(self, queryset):
        queryset.update(is_active=True)

    approve_comments.short_description = "–û–¥–æ–±—Ä–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"


@admin.register(CommentLike)
class CommentLikeAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ–ª–∏ –ª–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º.
    """

    list_display = ("comment", "user", "is_like", "created_at")
    list_filter = ("is_like",)


@admin.register(ArticleMedia)
class ArticleMediaAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏ —Å—Ç–∞—Ç–µ–π.
    """

    list_display = ("id", "article", "is_cover")
    fields = ("article", "photo", "video", "video_duration", "is_cover")
    search_fields = ("article__title",)

    def media_type_display(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∏–ø –º–µ–¥–∏–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.
        """
        if obj.photo:
            return "üì∑ –§–æ—Ç–æ"
        elif obj.video:
            return "üé• –í–∏–¥–µ–æ"
        return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    media_type_display.short_description = "–¢–∏–ø –º–µ–¥–∏–∞"

    def save_model(self, request, obj, form, change):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–±–ª–æ–∂–µ–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.
        """

        if obj.is_cover and obj.photo:
            ArticleMedia.objects.filter(article=obj.article, is_cover=True).exclude(pk=obj.pk).update(is_cover=False)
        super().save_model(request, obj, form, change)
