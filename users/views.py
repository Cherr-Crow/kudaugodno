import logging
import random
from datetime import timedelta

from django.conf import settings
from django.contrib.auth import authenticate
from django.core.mail import EmailMessage
from django.utils.timezone import now
from drf_spectacular.utils import (
    OpenApiExample,
    OpenApiResponse,
    extend_schema,
    extend_schema_field,
    extend_schema_view,
)
from rest_framework import mixins, serializers, status, viewsets
from rest_framework.decorators import action
from rest_framework.parsers import FormParser, MultiPartParser
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.response import Response
from rest_framework_simplejwt.tokens import RefreshToken

from all_fixture.choices import RoleChoices
from all_fixture.fixture_views import auth, entreprise, entreprise_id, limit, offset, user_id, user_settings
from all_fixture.pagination import CustomLOPagination
from config.settings import EMAIL_HOST_USER
from users.models import User
from users.permissions import IsAdminOrOwner
from users.serializers import (
    CheckTokenErrorResponseSerializer,
    CheckTokenSuccessResponseSerializer,
    CompanyUserSerializer,
    DeleteTokenSerializer,
    EmailCodeResponseSerializer,
    EmailLoginSerializer,
    ErrorResponseSerializer,
    LogoutSerializer,
    LogoutSuccessResponseSerializer,
    UserSerializer,
    VerifyCodeResponseSerializer,
    VerifyCodeSerializer,
)


logger = logging.getLogger(__name__)


@extend_schema_view(
    list=extend_schema(
        summary="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç—É—Ä–∏—Å—Ç)",
        description="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        tags=[user_settings["name"]],
        parameters=[limit, offset],
        responses={200: UserSerializer(many=True)},
    ),
    create=extend_schema(
        summary="–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º email –∏ –ø–∞—Ä–æ–ª—è",
        tags=[user_settings["name"]],
        request={"multipart/form-data": UserSerializer},
        responses={201: UserSerializer},
    ),
    retrieve=extend_schema(
        summary="–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
        description="–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Ç—É—Ä–∏—Å—Ç–µ) –ø–æ ID",
        tags=[user_settings["name"]],
        parameters=[user_id],
        responses={
            200: UserSerializer,
            404: OpenApiResponse(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        },
    ),
    update=extend_schema(
        summary="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description="–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Ç—É—Ä–∏—Å—Ç–µ) –ø–æ ID",
        tags=[user_settings["name"]],
        parameters=[user_id],
        request={"multipart/form-data": UserSerializer},
        responses={
            200: UserSerializer,
            400: OpenApiResponse(description="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"),
            404: OpenApiResponse(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        },
    ),
    destroy=extend_schema(
        summary="–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description=(
            "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID.\n\n"
            "- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é `USER` –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ **—Å–µ–±—è**.\n"
            "- –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å **–ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**.\n"
            "- –¢—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –û—Ç–µ–ª—å–µ—Ä—ã —É–¥–∞–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ä—É—á–∫—É –∫–æ–º–ø–∞–Ω–∏–π.\n\n"
            "–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å `refresh` —Ç–æ–∫–µ–Ω –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –µ–≥–æ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)."
        ),
        tags=[user_settings["name"]],
        parameters=[user_id],
        request=DeleteTokenSerializer,
        responses={
            204: OpenApiResponse(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω"),
            403: OpenApiResponse(description="–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ"),
            404: OpenApiResponse(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        },
    ),
)
class UserViewSet(viewsets.ModelViewSet):
    """ViewSet –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç—É—Ä–∏—Å—Ç–æ–≤)."""

    queryset = User.objects.none()
    serializer_class = UserSerializer
    pagination_class = CustomLOPagination
    # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ—Ö, —é–∑–µ—Ä ‚Äî —Ç–æ–ª—å–∫–æ —Å–µ–±—è

    # –ò—Å–∫–ª—é—á–∞–µ–º 'patch'
    http_method_names = ["get", "post", "put", "delete", "head", "options", "trace"]

    def get_queryset(self):
        user = self.request.user
        if user.is_authenticated and user.is_superuser:
            return User.objects.all().order_by("-pk")
        else:
            return User.objects.filter(pk=user.pk)

    def get_permissions(self):
        if self.action == "create":
            permission_classes = [AllowAny]
        else:
            permission_classes = [IsAdminOrOwner]
        return [permission() for permission in permission_classes]

    def retrieve(self, request, *args, **kwargs):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID."""
        instance = self.get_object()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–∞
        self.check_object_permissions(request, instance)
        serializer = self.get_serializer(instance)
        return Response(serializer.data)

    @extend_schema_field(serializers.ImageField())
    def get_avatar(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç URL –∞–≤–∞—Ç–∞—Ä–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞."""
        if obj.avatar:
            return obj.avatar.url
        return None

    def update(self, request, *args, **kwargs):
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Ç—É—Ä–∏—Å—Ç–µ)."""
        instance = self.get_object()
        serializer = self.get_serializer(instance, data=request.data)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return super().update(request, *args, **kwargs)

    def destroy(self, request, *args, **kwargs):
        instance = self.get_object()
        user = request.user

        # –¢–æ–ª—å–∫–æ USER –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–µ–±—è, –∏–Ω–∞—á–µ ‚Äî —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
        if not user.is_superuser:
            if user != instance or instance.role != RoleChoices.USER:
                return Response({"error": "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ"}, status=status.HTTP_403_FORBIDDEN)

        # –ê–Ω–Ω—É–ª–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω (–º—è–≥–∫–æ)
        refresh_token = request.data.get("refresh")
        if refresh_token:
            try:
                token = RefreshToken(refresh_token)
                token.blacklist()
            except Exception as e:
                logger.warning(f"[User DELETE] –ù–µ —É–¥–∞–ª–æ—Å—å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω {instance.email}: {e}")

        self.perform_destroy(instance)
        return Response({"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω"}, status=status.HTTP_204_NO_CONTENT)


@extend_schema_view(
    list=extend_schema(
        summary="–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π (–¢—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –û—Ç–µ–ª—å–µ—Ä—ã)",
        description="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π (–¢—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –û—Ç–µ–ª—å–µ—Ä—ã)",
        tags=[entreprise["name"]],
        parameters=[limit, offset],
        responses={200: CompanyUserSerializer(many=True)},
    ),
    create=extend_schema(
        summary="–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
        description="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¢—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –û—Ç–µ–ª—å–µ—Ä–∞",
        tags=[entreprise["name"]],
        request=CompanyUserSerializer,
        responses={201: CompanyUserSerializer},
    ),
    retrieve=extend_schema(
        summary="–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏",
        description="–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ ID",
        tags=[entreprise["name"]],
        parameters=[entreprise_id],
        responses={
            200: CompanyUserSerializer,
            404: OpenApiResponse(description="–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"),
        },
    ),
    update=extend_schema(
        summary="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
        description="–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ ID",
        tags=[entreprise["name"]],
        parameters=[entreprise_id],
        request=CompanyUserSerializer,  # üëà –≤–µ—Ä–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        responses={
            200: CompanyUserSerializer,
            400: OpenApiResponse(description="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"),
            404: OpenApiResponse(description="–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"),
        },
    ),
    destroy=extend_schema(
        summary="–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
        description=(
            "–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–¢—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –û—Ç–µ–ª—å–µ—Ä–∞) –ø–æ ID.\n\n"
            "- –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏.\n"
            "- –¢—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä –∏ –û—Ç–µ–ª—å–µ—Ä **–Ω–µ –º–æ–≥—É—Ç —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ**.\n\n"
            "–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å `refresh` —Ç–æ–∫–µ–Ω –¥–ª—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)."
        ),
        tags=[entreprise["name"]],
        parameters=[entreprise_id],
        request=DeleteTokenSerializer,  # üëà —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
        responses={
            204: OpenApiResponse(description="–ö–æ–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞"),
            403: OpenApiResponse(description="–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ"),
            404: OpenApiResponse(description="–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"),
        },
    ),
)
class CompanyUserViewSet(viewsets.ModelViewSet):
    """ViewSet –¥–ª—è –¢—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –û—Ç–µ–ª—å–µ—Ä–æ–≤."""

    queryset = User.objects.filter(role__in=[RoleChoices.TOUR_OPERATOR, RoleChoices.HOTELIER]).order_by("-pk")
    serializer_class = CompanyUserSerializer
    pagination_class = CustomLOPagination
    # –ò—Å–∫–ª—é—á–∞–µ–º 'patch'
    http_method_names = ["get", "post", "put", "delete", "head", "options", "trace"]
    parser_classes = (MultiPartParser, FormParser)

    def get_queryset(self):
        user = self.request.user
        if user.is_authenticated and user.is_superuser:
            return User.objects.filter(role__in=[RoleChoices.TOUR_OPERATOR, RoleChoices.HOTELIER]).order_by("-pk")
        elif user.role in [RoleChoices.TOUR_OPERATOR, RoleChoices.HOTELIER]:
            return User.objects.filter(pk=user.pk)
        return User.objects.none()

    def get_permissions(self):
        if self.action == "create":
            permission_classes = [AllowAny]
        else:
            permission_classes = [IsAdminOrOwner]
        return [permission() for permission in permission_classes]

    def retrieve(self, request, *args, **kwargs):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ ID."""
        instance = self.get_object()
        self.check_object_permissions(request, instance)
        serializer = self.get_serializer(instance)
        return Response(serializer.data)

    def update(self, request, *args, **kwargs):
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ ID."""
        instance = self.get_object()
        serializer = self.get_serializer(instance, data=request.data)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return super().update(request, *args, **kwargs)

    def destroy(self, request, *args, **kwargs):
        instance = self.get_object()
        user = request.user

        # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏
        if not user.is_superuser:
            return Response({"error": "–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"}, status=status.HTTP_403_FORBIDDEN)

        # –ú—è–≥–∫–æ–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        refresh_token = request.data.get("refresh")
        if refresh_token:
            try:
                token = RefreshToken(refresh_token)
                token.blacklist()
            except Exception as e:
                logger.warning(f"[Company DELETE] –ù–µ —É–¥–∞–ª–æ—Å—å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω {instance.email}: {e}")

        self.perform_destroy(instance)
        return Response({"message": "–ö–æ–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞"}, status=status.HTTP_204_NO_CONTENT)


class AuthViewSet(mixins.CreateModelMixin, viewsets.GenericViewSet):
    """ViewSet –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ email-–∫–æ–¥—É (–±–µ–∑ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)."""

    permission_classes = [AllowAny]
    serializer_class = EmailLoginSerializer

    def get_serializer_class(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è."""
        if self.action == "create":
            return EmailLoginSerializer
        elif self.action == "verify":
            return VerifyCodeSerializer
        return self.serializer_class

    @extend_schema(
        summary="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞",
        description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –Ω–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.",
        tags=[auth["name"]],
        request={"multipart/form-data": EmailLoginSerializer},
        responses={
            200: OpenApiResponse(response=EmailCodeResponseSerializer, description="–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"),
            404: OpenApiResponse(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        },
        examples=[OpenApiExample(name="–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞", value={"email": "user@example.com"}, request_only=True)],
    )
    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        email = serializer.validated_data["email"]
        is_registered = User.objects.filter(email=email).exists()
        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            return Response(
                {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", "register": is_registered}, status=status.HTTP_404_NOT_FOUND
            )

        code = random.randint(1000, 9999)
        user.set_password(str(code))
        user.save(update_fields=["password"])

        self.send_email(user.email, code)

        return Response({"message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email", "register": is_registered}, status=status.HTTP_200_OK)

    @staticmethod
    def send_email(email, code):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –∫–æ–¥–æ–º."""
        email_message = EmailMessage(
            subject="–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞",
            body=f"""
                <html>
                    <body>
                        <p>–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–µ—Ä–≤–∏—Å <strong>'–ö—É–¥–∞ –£–≥–æ–¥–Ω–æ'</strong>:
                        <strong style="font-size:18px;color:#007bff;">{code}</strong>.</p>
                        <p><strong>–ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥!</strong>
                        –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∫–æ–¥, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.</p>
                    </body>
                </html>
            """,
            from_email=EMAIL_HOST_USER,
            to=[email],
        )
        email_message.content_subtype = "html"
        email_message.send()

    @extend_schema(
        summary="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã",
        description="–ü—Ä–æ–≤–µ—Ä–∫–∞ email –∏ –∫–æ–¥–∞, –≤–æ–∑–≤—Ä–∞—Ç JWT-—Ç–æ–∫–µ–Ω–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        tags=[auth["name"]],
        request={"multipart/form-data": VerifyCodeSerializer},
        responses={
            200: OpenApiResponse(
                response=VerifyCodeResponseSerializer, description="–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            ),
            400: OpenApiResponse(
                description="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥",
                examples=[OpenApiExample(name="–û—à–∏–±–∫–∞", value={"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"}, response_only=True)],
            ),
        },
    )
    @action(detail=False, methods=["post"], url_path="verify", permission_classes=[AllowAny])
    def verify(self, request):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞, –≤—ã–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
        serializer = VerifyCodeSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        email = serializer.validated_data["email"]
        code = serializer.validated_data["code"]

        user = authenticate(email=email, password=str(code))

        if user:
            refresh = RefreshToken.for_user(user)
            response = Response(
                {
                    "refresh": str(refresh),
                    "access": str(refresh.access_token),
                    "role": user.role,
                    "id": user.id,
                },
                status=status.HTTP_200_OK,
            )

            expires = now() + timedelta(days=30)
            secure = not settings.DEBUG

            response.set_cookie(
                key="access_token",
                value=str(refresh.access_token),
                httponly=True,
                secure=secure,
                samesite="Lax",
                expires=expires,
            )
            response.set_cookie(
                key="refresh_token",
                value=str(refresh),
                httponly=True,
                secure=secure,
                samesite="Lax",
                expires=expires,
            )
            return response

        return Response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"}, status=status.HTTP_400_BAD_REQUEST)

    @extend_schema(
        summary="–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (Logout)",
        description="–ê–Ω–Ω—É–ª–∏—Ä—É–µ—Ç refresh-—Ç–æ–∫–µ–Ω –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        tags=[auth["name"]],
        request={"multipart/form-data": LogoutSerializer},
        responses={
            205: OpenApiResponse(response=LogoutSuccessResponseSerializer, description="–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"),
            400: OpenApiResponse(
                response=ErrorResponseSerializer,
                description="–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ",
                examples=[
                    OpenApiExample(
                        name="–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω",
                        value={"error": "Refresh-—Ç–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω"},
                        response_only=True,
                    ),
                    OpenApiExample(
                        name="–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω",
                        value={"error": "Token is invalid or expired"},
                        response_only=True,
                    ),
                ],
            ),
        },
    )
    @action(detail=False, methods=["post"], url_path="logout", permission_classes=[IsAuthenticated])
    def logout(self, request):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã: –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ refresh-—Ç–æ–∫–µ–Ω–∞."""
        serializer = LogoutSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        refresh_token = serializer.validated_data["refresh"]

        try:
            token = RefreshToken(refresh_token)
            token.blacklist()

            response = Response({"message": "–í—ã –≤—ã—à–ª–∏"}, status=status.HTTP_200_OK)
            response.delete_cookie("access_token")
            response.delete_cookie("refresh_token")
            return response

        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)

    @extend_schema(
        summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ access-—Ç–æ–∫–µ–Ω–∞",
        description="–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏ access-—Ç–æ–∫–µ–Ω. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401.",
        tags=[auth["name"]],
        responses={
            200: OpenApiResponse(response=CheckTokenSuccessResponseSerializer, description="–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"),
            401: OpenApiResponse(
                response=CheckTokenErrorResponseSerializer,
                description="–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                examples=[
                    OpenApiExample(
                        name="–û—à–∏–±–∫–∞", value={"error": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω"}, response_only=True
                    )
                ],
            ),
        },
    )
    @action(detail=False, methods=["get"], url_path="check-token", permission_classes=[IsAuthenticated])
    def check_token(self, request):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 OK, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –∏–Ω–∞—á–µ 401."""
        return Response({"message": "–¢–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–µ–Ω"}, status=status.HTTP_200_OK)
