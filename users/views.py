import random
from django.contrib.auth import authenticate
from django.core.exceptions import ValidationError as DjangoValidationError
from django.core.mail import EmailMessage
from rest_framework import status, viewsets, mixins
from rest_framework.exceptions import ValidationError as DRFValidationError
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from drf_spectacular.utils import (
    extend_schema,
    extend_schema_view,
    OpenApiParameter,
    OpenApiResponse
)
from config.settings import EMAIL_HOST_USER
from users.models import User
from users.serializers import (
    AdminSerializer,
    EmailLoginSerializer,
    UserSerializer,
    VerifyCodeSerializer
)
from users.tasks import clear_user_password


# üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API-–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
user_parameters = [
    OpenApiParameter(
        name="id",
        type=int,
        location=OpenApiParameter.PATH,
        description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        required=True,
    )
]
tags_users = ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"]


@extend_schema_view(
    list=extend_schema(
        summary="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        description="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        tags=tags_users,
        parameters=[
            OpenApiParameter(
                name="limit",
                type=int,
                description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏",
                required=False
            ),
            OpenApiParameter(
                name="offset",
                type=int,
                description="–°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏",
                required=False
            ),
        ],
        responses={
            200: UserSerializer(many=True),
            400: OpenApiResponse(description="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞"),
        },
    ),
    create=extend_schema(
        summary="–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π 4-–∑–Ω–∞—á–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ email.",
        tags=tags_users,
        request=AdminSerializer,
        responses={
            201: AdminSerializer,
            400: OpenApiResponse(description="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"),
        },
    ),
)
class UserViewSet(viewsets.ModelViewSet):
    """
    ViewSet –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (CRUD).
    """
    queryset = User.objects.all().order_by("-pk")
    serializer_class = UserSerializer
    lookup_field = "id"
    lookup_url_kwarg = "id"

    def get_serializer_class(self):
        """–í—ã–±–æ—Ä —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è."""
        if self.action in ["create", "update", "partial_update"]:
            return AdminSerializer
        return UserSerializer

    def create(self, request, *args, **kwargs):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 4-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
        - –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ email
        """
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()

        try:
            user.full_clean()
        except DjangoValidationError as e:
            raise DRFValidationError(e.message_dict)

        random_number = random.randint(1000, 9999)
        user.set_password(str(random_number))
        user.save(update_fields=["password"])

        # üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML-–ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º
        email_message = EmailMessage(
            subject="–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞",
            body=f"""
                <html>
                    <body>
                        <p>–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–µ—Ä–≤–∏—Å <strong>'–ö—É–¥–∞ –£–≥–æ–¥–Ω–æ'</strong>: 
                        <strong style="font-size:18px;color:#007bff;">{random_number}</strong>.</p>
                        <p><strong>–ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ –µ–≥–æ!</strong> –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∫–æ–¥, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.</p>
                    </body>
                </html>
            """,
            from_email=EMAIL_HOST_USER,
            to=[user.email],
        )
        email_message.content_subtype = "html"  # –£–∫–∞–∑—ã–≤–∞–µ–º HTML-—Ñ–æ—Ä–º–∞—Ç
        email_message.send()

        # –û—á–∏—Å—Ç–∫–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        clear_user_password.apply_async((user.id,), countdown=300)

        return Response(serializer.data, status=status.HTTP_201_CREATED)


@extend_schema_view(
    create=extend_schema(
        summary="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞",
        description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –Ω–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.",
        request=EmailLoginSerializer,
        responses={200: OpenApiResponse(description="–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email")},
    ),
    partial_update=extend_schema(
        summary="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω",
        description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç email –∏ –∫–æ–¥, –ø–æ–ª—É—á–∞–µ—Ç JWT-—Ç–æ–∫–µ–Ω—ã.",
        request=VerifyCodeSerializer,
        responses={200: OpenApiResponse(description="JWT-—Ç–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã")},
    ),
)
class AuthViewSet(mixins.CreateModelMixin, mixins.UpdateModelMixin, viewsets.GenericViewSet):
    """
    ViewSet –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ email-–∫–æ–¥—É.
    """
    permission_classes = [AllowAny]

    def create(self, request, *args, **kwargs):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ email:
        - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –Ω–∞ –ø–æ—á—Ç—É –≤ HTML-—Ñ–æ—Ä–º–∞—Ç–µ
        """
        serializer = EmailLoginSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        email = serializer.validated_data["email"]

        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            return Response({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=status.HTTP_404_NOT_FOUND)

        code = random.randint(1000, 9999)
        user.set_password(str(code))
        user.save(update_fields=["password"])

        # üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å HTML-–∫–æ–¥–æ–º
        email_message = EmailMessage(
            subject="–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞",
            body=f"""
                <html>
                    <body>
                        <p>–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–µ—Ä–≤–∏—Å <strong>'–ö—É–¥–∞ –£–≥–æ–¥–Ω–æ'</strong>: 
                        <strong style="font-size:18px;color:#007bff;">{code}</strong>.</p>
                        <p><strong>–ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ –µ–≥–æ!</strong> –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∫–æ–¥, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.</p>
                    </body>
                </html>
            """,
            from_email=EMAIL_HOST_USER,
            to=[user.email],
        )
        email_message.content_subtype = "html"
        email_message.send()

        # –û—á–∏—â–∞–µ–º –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        clear_user_password.apply_async((user.id,), countdown=300)

        return Response({"message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email"}, status=status.HTTP_200_OK)

    def partial_update(self, request, *args, **kwargs):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT-—Ç–æ–∫–µ–Ω—ã + —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        serializer = VerifyCodeSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        email = serializer.validated_data["email"]
        code = serializer.validated_data["code"]

        user = authenticate(email=email, password=str(code))
        if user:
            from rest_framework_simplejwt.tokens import RefreshToken
            refresh = RefreshToken.for_user(user)

            return Response({
                "refresh": str(refresh),
                "access": str(refresh.access_token),
                "role": user.role,  # üîπ –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–≤–µ—Ç
            }, status=status.HTTP_200_OK)

        return Response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"}, status=status.HTTP_400_BAD_REQUEST)
